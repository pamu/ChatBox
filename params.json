{"name":"Chatbox","tagline":"Simple Chat System Using Akka Actors (Akka Remoting)","body":"# ChatBox\r\nSimple Chat System Using Akka Actors (Akka Remoting)\r\n\r\n## ChatBox Actor\r\n\r\nManages the Client Actors and Client Actors register with the ChatBox Actor. The IP of the ChatBox actor is available to Client Actors. \r\nChatBox actor watches each Client actor that registers itself with it and removes them from the list of users once Client actors\r\nare unreachable.\r\n\r\n_**Conf for ChatBoxActor**_\r\n\r\napplication.conf\r\n\r\n```\r\n\r\n    akka {\r\n      loglevel = \"INFO\"\r\n      actor {\r\n        provider = \"akka.remote.RemoteActorRefProvider\"\r\n      }\r\n      remote {\r\n        enabled-transports = [\"akka.remote.netty.tcp\"]\r\n        netty.tcp {\r\n          hostname = \"127.0.0.1\"\r\n          port = 2222\r\n        }\r\n        log-sent-messages = on\r\n        log-received-messages = on\r\n      }\r\n    }\r\n    \r\n```\r\n\r\n_**ChatBox.scala**_\r\n\r\n```scala\r\n\r\n    package actors\r\n    \r\n    import akka.actor.{Terminated, ActorRef, ActorLogging, Actor}\r\n    \r\n    /**\r\n     * Created by android on 21/3/15.\r\n     */\r\n    \r\n    object ChatBox {\r\n      case class Register(name: String)\r\n      case class Message(from: String, to: String, body: String)\r\n    }\r\n    \r\n    class ChatBox extends Actor with ActorLogging {\r\n    \r\n      var clients = Map.empty[String, ActorRef]\r\n    \r\n      import ChatBox._\r\n      import Client._\r\n    \r\n      override def receive = {\r\n        case Register(name) => {\r\n         if (! (clients contains name) ) {\r\n           clients += (name -> sender)\r\n           context watch sender\r\n           log.info(\"Clients\")\r\n           log.info(clients.mkString(\"\\n\"))\r\n         }\r\n        }\r\n    \r\n        case Message(from, to, body) =>\r\n          log.info(s\"from: $from says: $body to: $to\")\r\n          if(clients contains to) {\r\n            clients(to) ! ReceiveMessage(from, body)\r\n          }else {\r\n            log.info(\"message dropped\")\r\n          }\r\n    \r\n        case Terminated(actor) => {\r\n          clients = clients.filter(_._2 != actor)\r\n        }\r\n        case _ => log.info(\"unknown message\")\r\n      }\r\n    }\r\n    \r\n```\r\n\r\n\r\n## Client Actor\r\n\r\nEach Client Actor represents the User and registers with the ChatBox Actor initially. Registration\r\nhappens by first looking up the actor using `context.actorSelection(\"akka.tcp://ChatSystem@someip:port/user/ChatBox\")`\r\nand then the Register message is sent by the client to the ChatBox actor thus registering with the chatbox actor.\r\n\r\n_**Conf for ClientActor**_\r\n\r\nclient.conf\r\n\r\n```\r\n\r\n    akka {\r\n      loglevel = \"INFO\"\r\n      actor {\r\n        provider = \"akka.remote.RemoteActorRefProvider\"\r\n      }\r\n      remote {\r\n        enabled-transports = [\"akka.remote.netty.tcp\"]\r\n        netty.tcp {\r\n          hostname = \"127.0.0.1\"\r\n          port = 0\r\n        }\r\n        log-sent-messages = on\r\n        log-received-messages = on\r\n      }\r\n    }\r\n    \r\n```\r\n\r\n_**Client.scala**_\r\n\r\n```scala\r\n    \r\n    package actors\r\n    \r\n    import akka.actor.{ActorLogging, ActorSelection, Actor}\r\n    \r\n    /**\r\n     * Created by android on 21/3/15.\r\n     */\r\n    object Client {\r\n      case class SendMessage(to: String, message: String)\r\n      case class ReceiveMessage(from: String, message: String)\r\n    }\r\n    \r\n    class Client(name: String, ip: String) extends Actor with ActorLogging {\r\n    \r\n      import ChatBox._\r\n      import Client._\r\n    \r\n      var chatBox: Option[ActorSelection] = None\r\n    \r\n      override def preStart(): Unit = {\r\n        chatBox = Some(context.actorSelection(\"akka.tcp://ChatSystem@$ip:2222/\" +\r\n          \"user/ChatBox\")) // node that chat box actor lookup is done using ChatBoxActor Running machine IP.\r\n          //localhost if both ChatBoxActor and Client Actor are running on same machine.\r\n    \r\n        chatBox.map(actor => actor ! Register(name))\r\n    \r\n        chatBox.getOrElse({\r\n          println(\"ChatBox unreachable, shutting down :(\")\r\n          context.stop(self)\r\n        })\r\n      }\r\n    \r\n      override def receive = {\r\n        case SendMessage(to, message) => chatBox.map(actor => actor ! Message(name, to, message))\r\n        case ReceiveMessage(from, message) =>\r\n          println(s\"$from says: $message\")\r\n        case _ => log.info(\"unknown message\")\r\n      }\r\n    }\r\n\r\n\r\n```\r\n\r\n## Main\r\n\r\n_**Start ChatBox first on a Machine and use the IP of the ChatBox to lookup ChatBox from Client**_\r\n\r\n_**StartChatBox**_\r\n\r\n```scala\r\n\r\n    package main\r\n    \r\n    import actors.ChatBox\r\n    import akka.actor.{Props, ActorSystem}\r\n    import com.typesafe.config.ConfigFactory\r\n    \r\n    /**\r\n     * Created by android on 21/3/15.\r\n     */\r\n    object StartChatBox {\r\n      def main(args: Array[String]): Unit = {\r\n        val config = ConfigFactory.load()\r\n        val chatSystem = ActorSystem(\"ChatSystem\", config)\r\n        val chatBox = chatSystem.actorOf(Props[ChatBox], name = \"ChatBox\")\r\n      }\r\n    }\r\n\r\n```\r\n\r\n_**StartClient**_\r\n\r\n```scala\r\n    \r\n    package main\r\n\r\n    import actors.Client\r\n    import akka.actor.{Props, ActorSystem}\r\n    import com.typesafe.config.ConfigFactory\r\n\r\n    /**\r\n     * Created by android on 21/3/15.\r\n     */\r\n    object StartClient {\r\n      def main(args: Array[String]): Unit = {\r\n        if (args.isEmpty) {\r\n          println(\"Please provide IP of ChatBox Actor as the commandline argument\")\r\n          System.exit(0)\r\n        }\r\n        val config = ConfigFactory.load(\"client\")\r\n        val clientSystem = ActorSystem(\"ClientSystem\", config)\r\n        println(\"Enter your Nick Name:\")\r\n        var name = Console.readLine.trim\r\n        while (name == \"\") {\r\n          println(\"Enter your Nick Name:\")\r\n          name = Console.readLine.trim\r\n        }\r\n        val client = clientSystem.actorOf(Props(new Client(name)), \"Client\")\r\n\r\n        println(\"Type message end with -> after -> type name of the person to send \" +\r\n          \"and hit enter to send messages\")\r\n\r\n        while (true) {\r\n          val line = Console.readLine.trim\r\n          if (line != \"\" && line.contains(\"->\") && line.split(\"->\").size == 2) {\r\n            val texts = line.split(\"->\")\r\n            client ! Client.SendMessage(texts(1).trim, texts(0).trim)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n```\r\n\r\n\r\n## Usage\r\n\r\nStart ChatBox Actor\r\n\r\n` sbt \"runMain main.StartChatBox\" //note the IP of the machine `\r\n\r\n\r\nnow Start Client Actor\r\n\r\n` sbt \"runMain main.StartClient 127.0.0.1\" // IP of the machine running chatbox actor `","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}